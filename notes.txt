===============
SET UP
===============
to start a new project:
dotnet new console --framework net7.0

run a project with "dotnet run" which runs the Program.cs in that directory
or with coderunner (already set up)

Console.Write() -> [console.log()]

====================================================STRINGS
\t is tab -- \n is linebreak
"Hello \"World\"!" -> \ escapes in a string

Console.WriteLine(@"    c:\source\repos    
        (this is where your code goes)"); -> @"" is a verbatim string literal that keeps all whitespace. it also keeps in \ as literals

\u1111 -> \u + four character code is a unicode character

string message = $"{greeting} {firstName}!"; -> kino string interpolation (just like backtics in JS)

Can combine them into @$"" for both interpolation and verbatim

=====================================================NUMBERS
double quotient = 7.0 / 5; -> interestingly just declaring it as a double isn't enough. must also have a 7.0 type in there.

int first = 7;
int second = 5;
decimal quotient = (decimal)first / (decimal)second; -> "TYPE CASTING" lets you change the type by putting it in parenths before it.

Order of Operations:
Parentheses (whatever is inside the parenthesis is performed first)
Exponents
Multiplication and Division (from left to right)
Addition and Subtraction (from left to right)

Console.WriteLine("Second: " + value++);
There's two steps to this line:
Retrieve the current value of the variable value and use that in the string interpolation operation.
Increment the value.
--> hyper strange. Idk why you would do this. but value++ actually displays as value, but then it increments value.

++value would increment the value then display the new value

+= -> is called addition assignment